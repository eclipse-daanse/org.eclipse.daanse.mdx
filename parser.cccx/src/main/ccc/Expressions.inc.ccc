/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// Breaking the expression logic out into a
// separate INCLUDE

INJECT PARSER_CLASS :
  import org.eclipse.daanse.mdx.model.api.expression.CallExpression.Type;

INJECT BASE_NODE_CLASS :
{
  public List<org.eclipse.daanse.mdx.model.api.expression.MdxExpression> expressions() {
    return Collections.unmodifiableList(childrenOfType(org.eclipse.daanse.mdx.model.api.expression.MdxExpression.class));
  }
}

Expression#interface :
  OrExpression
  (
    (
      < AS >
      ObjectIdentifier
    )#BinaryExpression(+1)
  )*
;

INJECT interface ObjectIdentifier:
  import org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier.Quoting;
{

  public Quoting quoting();
}

ObjectIdentifier#interface :
  NameObjectIdentifier
  |
  KeyObjectIdentifier
;

INJECT interface NameObjectIdentifier :
    extends ObjectIdentifier,
            org.eclipse.daanse.mdx.model.api.expression.NameObjectIdentifier,
            org.eclipse.daanse.mdx.model.api.expression.SymbolLiteral

NameObjectIdentifier#interface :
  // It seems that some reserved words can act as identifiers under
  // some considerations, but of course, that is what the [...] is for, no?
  // This only seems to exist in the Pentaho grammar. REVISIT
  //<RESERVED_WORD>
  //|
  < ID >
  |
  // Neither the Microsoft spec nor the Oracle spec makes any mention of this!
  < AT_ID >
  |
  < QUOTED_ID >
;


INJECT KeyObjectIdentifier :
   implements ObjectIdentifier, org.eclipse.daanse.mdx.model.api.expression.KeyObjectIdentifier
{
   public java.util.List<NameObjectIdentifier> nameObjectIdentifiers() {
     return childrenOfType(NameObjectIdentifier.class);
   }

   @Override
   public Quoting quoting() {
       return Quoting.KEY;
   }
}

// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
KeyObjectIdentifier :
  ( <AMP_QUOTED_ID> | <AMP_UNQUOTED_ID> )+
;


INJECT CompoundId :
    import static PARSER_PACKAGE.PARSER_CLASS.stripQuotes;
    import java.util.List;
    import org.eclipse.daanse.mdx.model.api.expression.operation.AmpersandQuotedPropertyOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.PlainPropertyOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.QuotedPropertyOperationAtom;
    implements Expression,
               org.eclipse.daanse.mdx.model.api.expression.CompoundId
{
	public java.util.List<org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier> objectIdentifiers() {
		return childrenOfType(org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier.class);
	}

	public OperationAtom operationAtom() {
		String lastChild = getLastChild().getSource();
		if (lastChild.startsWith("[&")) {
			return new AmpersandQuotedPropertyOperationAtom(stripQuotes(lastChild).substring(1));
		}
		char firstChar = lastChild.charAt(0);
		return firstChar == '[' ? new QuotedPropertyOperationAtom(stripQuotes(lastChild))
				: new PlainPropertyOperationAtom(lastChild);
	}

	public List<org.eclipse.daanse.mdx.model.api.expression.MdxExpression> expressions() {
		if (operationAtom() instanceof PlainPropertyOperationAtom && isChildrenHaveQuoted()) {
			CompoundId compoundId = new CompoundId();
			List<ObjectIdentifier> list = childrenOfType(ObjectIdentifier.class);
			if (!list.isEmpty()) {
				for (int i = 0; i < list.size() - 1; i++) {
					compoundId.add(list.get(i));
				}
			}
			return List.of(compoundId);
		} else {
			return super.expressions();
		}
	}

	private boolean isChildrenHaveQuoted() {
		for (int i = 0; i < size(); i++) {
			Node child = get(i);
			char firstChar = child.getSource().charAt(0);
			if (firstChar == '[') {
				return true;
			}
		}
		return false;
	}
}

CompoundId :
  ObjectIdentifier
  (
    < DOT > ObjectIdentifier
  )*
;

OrExpression#void :
  AndExpression
  (
    (
      (<OR>|<XOR>|<XOR>|<COLON>)
      AndExpression
    )#BinaryExpression(+1)
  )*
;


AndExpression#void :
  NegatedExpression
  (
    (
      < AND >
      NegatedExpression
    )#BinaryExpression(+1)
  )*
;

INJECT NegatedExpression :
    import java.util.List;
    import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.PrefixOperationAtom;
    implements Expression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
	@Override
	public OperationAtom operationAtom() {
		return new PrefixOperationAtom("NOT");
	}
}

NegatedExpression#(>1) :
  <NOT> NegatedExpression
  |
  RelationalExpression
;

INJECT RelationalExpression :
	import java.util.List;
	import org.eclipse.daanse.mdx.model.api.expression.operation.InfixOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.PostfixOperationAtom;
   extends BinaryExpression
{
	public String name() {
		Node op = get(1);
		if (op.getType() == IS && op.nextSibling().getType() == EMPTY) {
			return "IS EMPTY";
		} else if (op.getType() == NOT) {
			NodeType nextType = op.nextSibling().getType();
			if (nextType == MATCHES)
				return "NOT MATCHES";
			if (nextType == IN)
				return "NOT IN";
		}
		return super.name();
	}

	@Override
	public OperationAtom operationAtom() {

		Node is = firstChildOfType(IS);
		if (is != null) {
			NodeType nextType = is.nextSibling().getType();
			if (nextType == NULL || nextType == EMPTY)
				return new PostfixOperationAtom(name());
		}

		return new InfixOperationAtom(name());
	}

	public List<org.eclipse.daanse.mdx.model.api.expression.MdxExpression> expressions() {
		if (operationAtom() instanceof PostfixOperationAtom) {
			return List.of((org.eclipse.daanse.mdx.model.api.expression.MdxExpression) getFirstChild());
		}
		return super.expressions();
	}
}

RelationalExpression#(>1) :
  AdditiveExpression
  (
    (
      < EQ > | < NE > | < LT > | < GT > | < LE > | < GE > | (<IS>[<EMPTY>]) | ([<NOT>] <MATCHES> =>||) | ([<NOT>] <IN> =>||)
    )
    (
      SCAN {getToken(0).getType()==EMPTY}# => {}
      |
      AdditiveExpression
    )
  )?
;

AdditiveExpression#void :
  MultiplicativeExpression
  (
   (
    (
     <PLUS>
     |
     <MINUS>
     |
     // Only seems to be in Pentaho
     <CONCAT>
    )
    MultiplicativeExpression
   )#BinaryExpression(+1)
  )*
;

INJECT BinaryExpression :
    import java.util.List;
    import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
    import org.eclipse.daanse.mdx.model.api.expression.operation.InfixOperationAtom;
    implements Expression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
	String name() {
		return get(1).getImage();
	}

	@Override
	public OperationAtom operationAtom() {
		return new InfixOperationAtom(name());
	}

    public List<org.eclipse.daanse.mdx.model.api.expression.MdxExpression> expressions() {
        return List.of((org.eclipse.daanse.mdx.model.api.expression.MdxExpression) getFirstChild(), (org.eclipse.daanse.mdx.model.api.expression.MdxExpression) getLastChild());
    }
}

MultiplicativeExpression#void :
  UnaryExpression
  (
    (
      (<ASTERISK>|<SOLIDUS>)
      UnaryExpression
    )#BinaryExpression(+1)
  )*
;

INJECT UnaryExpression :
    import java.util.List;
    import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.PrefixOperationAtom;
    implements Expression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
	@Override
	public OperationAtom operationAtom() {
		return new PrefixOperationAtom(getFirstChild().getImage());
	}
}

UnaryExpression#(>1) :
    (
      <PLUS>
      |
      <MINUS>
      |
      // This is only in Pentaho, it seems.
      <EXISTING>
    )?
    PrimaryExpression
;

INJECT PrimaryExpression : extends Expression

PrimaryExpression#interface :
    PrimaryPrefix
    (
      SCAN 1 {!(peekNode() instanceof CompoundId || peekNode() instanceof ObjectIdentifier || peekNode() instanceof QualifiedIdentifier)}
      =>
      <DOT> ObjectIdentifier #DotName(3)
      |
      SCAN 1 {peekNode() instanceof CompoundId
              || peekNode() instanceof ObjectIdentifier
              || peekNode() instanceof QualifiedIdentifier
              || peekNode() instanceof DotName}
      =>
      (
          < LPAREN >
          PossiblyEmptyExpression
          (< COMMA > PossiblyEmptyExpression)*
          < RPAREN >
      ) #FunctionCall(+1)
    )*
;

PrimaryPrefix#void :
      Literal
      |
      CastExpression
      |
      ExpressionList
      |
      Tuple
      |
      CaseExpression
      |
      QualifiedIdentifier
      |
      CompoundId
      {
        // If the CompoundId object has only
        // one child (which is a NameObjectIdentifier)
        // then just replace it with that in the tree.
        if (peekNode().size() ==1) {
          pokeNode(peekNode().getFirstChild());
        } else {
            ObjectIdentifier oid = (ObjectIdentifier) peekNode().get(2);
            CompoundId compoundId = (CompoundId) peekNode();
            pokeNode(org.eclipse.daanse.mdx.parser.cccx.MdxParserUtil.createCall(compoundId, this.propertyWords ));
        }
      }
;

INJECT DotName :
	import org.eclipse.daanse.mdx.model.api.expression.operation.AmpersandQuotedPropertyOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.PlainPropertyOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.QuotedPropertyOperationAtom;
    implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
    private String name() {
        return get(2) instanceof
        NameObjectIdentifier noi
        ? noi.name() : null;
    }

	@Override
	public OperationAtom operationAtom() {
        ObjectIdentifier oi = (ObjectIdentifier) get(2);
        return switch(oi.quoting()) {
            case UNQUOTED -> new PlainPropertyOperationAtom(name());
            case QUOTED -> new QuotedPropertyOperationAtom(name());
            default -> new AmpersandQuotedPropertyOperationAtom(name());
        };
	}
}

INJECT FunctionCall :
    import java.util.List;
    import java.util.ArrayList;
    import org.eclipse.daanse.mdx.model.api.expression.operation.FunctionOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.MethodOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
    implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{

	public String name() {
		if (getFirstChild() instanceof NameObjectIdentifier noi)
			return noi.name();
		if (getFirstChild() instanceof CompoundId ci)
			return ci.getLastChild().toString();
		return null;
	}

	@Override
	public OperationAtom operationAtom() {
		return getFirstChild() instanceof NameObjectIdentifier noi ? new FunctionOperationAtom(name())
				: new MethodOperationAtom(name());
	}

	public List<org.eclipse.daanse.mdx.model.api.expression.MdxExpression> expressions() {
		List<org.eclipse.daanse.mdx.model.api.expression.MdxExpression> result = childrenOfType(
				org.eclipse.daanse.mdx.model.api.expression.MdxExpression.class);
		if (operationAtom() instanceof MethodOperationAtom) {
			List<org.eclipse.daanse.mdx.model.api.expression.MdxExpression> res = new ArrayList<>();
			for (org.eclipse.daanse.mdx.model.api.expression.MdxExpression ex : result) {
				if (ex instanceof CompoundId compoundId) {
					List<org.eclipse.daanse.mdx.model.api.expression.MdxExpression> exList = compoundId.expressions();
					if (exList.size() > 0 && exList.get(0) instanceof NameObjectIdentifier nameObjectIdentifier) {
						res.add(nameObjectIdentifier);
					}
				} else {
					res.add(ex);
				}
			}
			return res;
		} else {
			// This is not supposed to include the LHS.
			result.remove(0);
			if (result.size() == 1 && result.get(0) instanceof EmptyExpression) {
				result.clear();
			}
		}
		return result;
	}
}

INJECT interface Literal : extends PrimaryExpression

Literal#interface :
    <STRING_LITERAL>
    |
    <UNSIGNED_INTEGER_LITERAL>
    |
    <DECIMAL_NUMERIC_LITERAL>
    |
    <APPROX_NUMERIC_LITERAL>
    |
    <NULL>
;

INJECT CastExpression :
	import org.eclipse.daanse.mdx.model.api.expression.operation.CastOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
    implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
	@Override
	public OperationAtom operationAtom() {
		return new CastOperationAtom();
	}
}

CastExpression :
    <CAST>
    <LPAREN>
    OrExpression
    <AS>
    NameObjectIdentifier
    <RPAREN>
;

INJECT ExpressionList :
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.ParenthesesOperationAtom;
  implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
	@Override
	public OperationAtom operationAtom() {
		return new ParenthesesOperationAtom();
	}
}

ExpressionList :
   <LPAREN>
   Expression
   (<COMMA> Expression)*
   <RPAREN>
;

INJECT Tuple :
	import org.eclipse.daanse.mdx.model.api.expression.operation.BracesOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
  implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
	@Override
	public OperationAtom operationAtom() {
		return new BracesOperationAtom();
	}

}

Tuple :
  // set built from sets/tuples
  < LBRACE >
  (
    Expression
    (<COMMA> Expression)*
  )?
  < RBRACE >
;

INJECT QualifiedIdentifier :
  implements PrimaryExpression

QualifiedIdentifier :
   NameObjectIdentifier
   =>|+1
      // We support the syntax for qualifying function names with package
      // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
      // but currently we ignore the qualifiers. The previous example is
      // equivalent to 'foo(a, b)'.
   (<BANG> NameObjectIdentifier)+
;

INJECT EmptyExpression :
	import org.eclipse.daanse.mdx.model.api.expression.operation.EmptyOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
 implements Expression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
	@Override
	public OperationAtom operationAtom() {
		return new EmptyOperationAtom();
	}
}


EmptyExpression#(true) :
{
   CURRENT_NODE.setBeginOffset(lastConsumedToken.getEndOffset());
}
;

PossiblyEmptyExpression#void :
  Expression
  |
  EmptyExpression
;

INJECT CaseExpression :
	import org.eclipse.daanse.mdx.model.api.expression.operation.CaseOperationAtom;
	import org.eclipse.daanse.mdx.model.api.expression.operation.OperationAtom;
   implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
    @Override
    public OperationAtom operationAtom() {
        return new CaseOperationAtom((get(1) instanceof org.eclipse.daanse.mdx.model.api.expression.MdxExpression) ? "_CaseMatch" : "_CaseTest");
    }
}

CaseExpression :
    < CASE >
    (
      Expression
    )?
    (
      < WHEN > Expression < THEN > Expression
    )*
    (
      < ELSE > Expression
    )?
    < END >
;

INJECT MemberPropertyDefinition :
  implements org.eclipse.daanse.mdx.model.api.select.MemberPropertyDefinition
{
    public org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier objectIdentifier() {
        return (org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier) getFirstChild();
    }

   public org.eclipse.daanse.mdx.model.api.expression.MdxExpression expression() {
        return (org.eclipse.daanse.mdx.model.api.expression.MdxExpression) get(2);
   }
}

MemberPropertyDefinition :
  ObjectIdentifier
  < EQ >
  Expression
  {
    if (peekNode() instanceof Expression expression) {
      pokeNode(org.eclipse.daanse.mdx.parser.cccx.MdxParserUtil.getExpression(expression, this.propertyWords));
    }
  }
;

